site_name: C++ Study Note
site_description: C++ Study Note

copyright: 'Copyright &copy; 2018 Diwen Liu'

docs_dir: study_notes

repo_url: https://github.com/demon90s/CppStudy
edit_uri: "tree/master/study_notes"

pages:
  - Introduction: index.md

  - C语言程序设计:
    - Chapters:
      - ch01 C语言概述: CProgramming/ch01 C语言概述.md
      - ch02 C语言基本概念: CProgramming/ch02 C语言基本概念.md
      - ch03 格式化输入输出: CProgramming/ch03 格式化输入输出.md
      - ch04 表达式: CProgramming/ch04 表达式.md
      - ch05 选择语句: CProgramming/ch05 选择语句.md
    - CheatSheet:
      - 惯用法: CProgramming/cheatsheet/惯用法.md

  - C++ Primer:
    - Chapters: 
      - ch01 开始: CppPrimer/ch01 开始.md
      - ch02 变量和基本类型: CppPrimer/ch02 变量和基本类型.md
      - ch03 字符串、向量和数组: CppPrimer/ch03 字符串、向量和数组.md
      - ch04 表达式: CppPrimer/ch04 表达式.md
      - ch05 语句: CppPrimer/ch05 语句.md
      - ch06 函数: CppPrimer/ch06 函数.md
      - ch07 类: CppPrimer/ch07 类.md
      - ch08 IO库: CppPrimer/ch08 IO库.md
      - ch09 顺序容器: CppPrimer/ch09 顺序容器.md
      - ch10 泛型算法: CppPrimer/ch10 泛型算法.md
      - ch11 关联容器: CppPrimer/ch11 关联容器.md
      - ch12 动态内存: CppPrimer/ch12 动态内存.md
      - ch13 拷贝控制: CppPrimer/ch13 拷贝控制.md
      - ch14 操作重载与类型转换: CppPrimer/ch14 操作重载与类型转换.md
      - ch15 面向对象程序设计: CppPrimer/ch15 面向对象程序设计.md
      - ch16 模板与泛型编程: CppPrimer/ch16 模板与泛型编程.md
      - ch17 标准库特殊设施: CppPrimer/ch17 标准库特殊设施.md
      - ch18 用于大型程序的工具: CppPrimer/ch18 用于大型程序的工具.md
      - ch19 特殊工具与技术: CppPrimer/ch19 特殊工具与技术.md
    - CheatSheet:
      - static的3个用途: CppPrimer/cheatsheet/static的3个用途.md
      - 若干种typedef: CppPrimer/cheatsheet/若干种typedef.md
      - 类内初始值: CppPrimer/cheatsheet/类内初始值.md
      - 运算符重载: CppPrimer/cheatsheet/运算符重载.md
      - 向set中插入自定义类型对象: CppPrimer/cheatsheet/向set中插入自定义类型对象.md

  - Effective C++:
    - 1 让自己习惯C++: 
      - 条款01：视C++为一个语言联邦: EffectiveCpp/1 让自己习惯C++/条款01：视C++为一个语言联邦.md
      - 条款02：尽量以const, enum, inline替换#define: EffectiveCpp/1 让自己习惯C++/条款02：尽量以const, enum, inline替换#define.md
      - 条款03：尽可能使用const: EffectiveCpp/1 让自己习惯C++/条款03：尽可能使用const.md
      - 条款04：确定对象被使用前已被初始化: EffectiveCpp/1 让自己习惯C++/条款04：确定对象被使用前已被初始化.md
    - 2 构造、析构、赋值运算:
      - 条款05：了解C++默默编写并调用哪些函数: EffectiveCpp/2 构造、析构、赋值运算/条款05：了解C++默默编写并调用哪些函数.md
      - 条款06：若不想使用编译器自动生成的函数，就该明确拒绝: EffectiveCpp/2 构造、析构、赋值运算/条款06：若不想使用编译器自动生成的函数，就该明确拒绝.md
      - 条款07：为多态基类声明virtual析构函数: EffectiveCpp/2 构造、析构、赋值运算/条款07：为多态基类声明virtual析构函数.md
      - 条款08：别让异常逃离析构函数: EffectiveCpp/2 构造、析构、赋值运算/条款08：别让异常逃离析构函数.md
      - 条款09：绝不在构造和析构过程中调用virtual函数: EffectiveCpp/2 构造、析构、赋值运算/条款09：绝不在构造和析构过程中调用virtual函数.md
      - 条款10：令operator=返回一个reference to this: EffectiveCpp/2 构造、析构、赋值运算/条款10：令operator=返回一个reference to this.md
      - 条款11：在operator=中处理“自我赋值”: EffectiveCpp/2 构造、析构、赋值运算/条款11：在operator=中处理“自我赋值”.md
      - 条款12：复制对象时勿忘其每一个成分: EffectiveCpp/2 构造、析构、赋值运算/条款12：复制对象时勿忘其每一个成分.md
    - 3 资源管理:
      - 条款13：以对象管理资源: EffectiveCpp/3 资源管理/条款13：以对象管理资源.md
      - 条款14：在资源管理类中小心 copying 行为: EffectiveCpp/3 资源管理/条款14：在资源管理类中小心 copying 行为.md
      - 条款15：在资源管理类中提供对原始资源的访问: EffectiveCpp/3 资源管理/条款15：在资源管理类中提供对原始资源的访问.md
      - 条款16：成对使用 new 和 delete 时要采取相同形式: EffectiveCpp/3 资源管理/条款16：成对使用 new 和 delete 时要采取相同形式.md
      - 条款17：以独立语句将 newed 对象置入智能指针: EffectiveCpp/3 资源管理/条款17：以独立语句将 newed 对象置入智能指针.md
    - 4 设计与声明:
      - 条款18：让接口容易被正确使用，不易被误用: EffectiveCpp/4 设计与声明/条款18：让接口容易被正确使用，不易被误用.md

theme:
  name: 'material'
  logo:
    icon: 'school'
  palette:
    primary: 'blue grey'
    accent: 'light blue'
  font:
    text: 'Open Sans'
    code: 'Open Sans Mono'
  language: 'zh'
  feature:
    tabs: true

extra:
  search:
    language: 'en, jp'

markdown_extensions:
  - admonition
  - codehilite
  - pymdownx.mark

google_analytics:
  - 'UA-XXXXXXXX-X'
  - 'auto'